name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  WASP_VERSION: '0.17.0'

jobs:
  # NEW: Pre-flight system checks
  preflight-checks:
    name: Pre-flight System Checks
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: System information
        run: |
          echo "üîç System Information:"
          echo "OS: $(uname -a)"
          echo "User: $(whoami)"
          echo "Home: $HOME"
          echo "PATH: $PATH"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          
      - name: Check project structure
        run: |
          echo "üìÅ Project Structure Check:"
          echo "Root directory contents:"
          ls -la
          
          echo "Planning system directory:"
          if [ -d "planning-system" ]; then
            echo "‚úÖ planning-system directory found"
            ls -la planning-system/
            
            # Check each component
            for component in app blog e2e-tests; do
              if [ -d "planning-system/$component" ]; then
                echo "‚úÖ planning-system/$component found"
                
                # Check for package.json
                if [ -f "planning-system/$component/package.json" ]; then
                  echo "‚úÖ planning-system/$component/package.json found"
                else
                  echo "‚ö†Ô∏è planning-system/$component/package.json missing"
                fi
              else
                echo "‚ùå planning-system/$component directory missing"
              fi
            done
            
            # Special check for Wasp main.wasp file
            if [ -f "planning-system/app/main.wasp" ]; then
              echo "‚úÖ Wasp project file found"
            else
              echo "‚ùå main.wasp file missing in planning-system/app/"
            fi
          else
            echo "‚ùå planning-system directory not found"
            exit 1
          fi

  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: [preflight-checks]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: planning-system/app/package-lock.json
      
      - name: Install dependencies
        working-directory: planning-system/app
        run: npm ci
      
      - name: Run ESLint
        working-directory: planning-system/app
        run: npm run lint || true
        
      - name: Run TypeScript check
        working-directory: planning-system/app
        run: npx tsc --noEmit || true

  # NEW: Blog component build and checks
  blog-build:
    name: Build Blog (Astro)
    runs-on: ubuntu-latest
    needs: [preflight-checks]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: planning-system/blog/package-lock.json
      
      - name: Install blog dependencies
        working-directory: planning-system/blog
        run: npm ci
      
      - name: Run Astro check
        working-directory: planning-system/blog
        run: npx astro check
      
      - name: Build blog
        working-directory: planning-system/blog
        run: npm run build
      
      - name: Upload blog build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: blog-dist
          path: planning-system/blog/dist/
          retention-days: 7

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [preflight-checks]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: planning-system/app/package-lock.json
      
      - name: Install dependencies
        working-directory: planning-system/app
        run: npm ci
      
      - name: Run unit tests
        working-directory: planning-system/app
        run: npm test -- --passWithNoTests || true
        env:
          CI: true

  financial-calculation-tests:
    name: Financial Calculation Accuracy Tests
    runs-on: ubuntu-latest
    needs: [preflight-checks]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: planning-system/app/package-lock.json
      
      - name: Install dependencies
        working-directory: planning-system/app
        run: npm ci
      
      - name: Run financial calculation tests
        working-directory: planning-system/app
        run: |
          echo "Running financial calculation validation..."
          npm run test:financial || true
        env:
          CI: true
      
      - name: Validate tax calculations
        working-directory: planning-system/app
        run: |
          echo "Validating country-specific tax calculations..."
          npm run test:tax-compliance || true
        env:
          CI: true

  multi-country-validation:
    name: Multi-Country Compliance Validation
    runs-on: ubuntu-latest
    needs: [preflight-checks]
    strategy:
      matrix:
        country: [AU, US, UK]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: planning-system/app/package-lock.json
      
      - name: Install dependencies
        working-directory: planning-system/app
        run: npm ci
      
      - name: Validate ${{ matrix.country }} compliance
        working-directory: planning-system/app
        run: |
          echo "Validating ${{ matrix.country }} tax compliance..."
          npm run test:country:${{ matrix.country }} || true
        env:
          CI: true
          TEST_COUNTRY: ${{ matrix.country }}

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, blog-build]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: planning-system/app/package-lock.json
      
      # ENHANCED: Robust Wasp installation with comprehensive error handling
      - name: Cache Wasp CLI
        uses: actions/cache@v4
        id: wasp-cache
        with:
          path: ~/.local/bin/wasp
          key: wasp-${{ env.WASP_VERSION }}-${{ runner.os }}
      
      - name: Install Wasp CLI
        if: steps.wasp-cache.outputs.cache-hit != 'true'
        run: |
          echo "üîß Installing Wasp CLI v${{ env.WASP_VERSION }}..."
          
          # Ensure .local/bin directory exists
          mkdir -p ~/.local/bin
          
          # Install with retry logic and detailed logging
          for i in {1..3}; do
            echo "Attempt $i of 3..."
            
            # Download and install with detailed output
            if curl -sSL https://get.wasp-lang.dev/installer.sh | sh -s -- -v ${{ env.WASP_VERSION }}; then
              echo "‚úÖ Wasp installation script completed"
              
              # Check if binary was actually installed
              if [ -f ~/.local/bin/wasp ]; then
                echo "‚úÖ Wasp binary found at ~/.local/bin/wasp"
                chmod +x ~/.local/bin/wasp
                break
              else
                echo "‚ùå Wasp binary not found after installation"
                echo "Contents of ~/.local/bin:"
                ls -la ~/.local/bin/ || echo "Directory doesn't exist"
              fi
            else
              echo "‚ùå Wasp installation script failed on attempt $i"
            fi
            
            if [ $i -eq 3 ]; then
              echo "‚ùå All installation attempts failed"
              echo "Final directory check:"
              ls -la ~/.local/bin/ || echo "~/.local/bin directory doesn't exist"
              exit 1
            fi
            
            echo "Waiting 5 seconds before retry..."
            sleep 5
          done
      
      - name: Setup Wasp PATH and verify installation
        run: |
          # Add to GitHub PATH for subsequent steps
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
          # Also export for current step
          export PATH="$HOME/.local/bin:$PATH"
          
          echo "üîç Verifying Wasp installation..."
          echo "Current PATH: $PATH"
          echo "Contents of ~/.local/bin:"
          ls -la ~/.local/bin/ || echo "Directory doesn't exist"
          
          # Multiple verification methods
          echo "Testing 'which wasp':"
          which wasp || echo "which command failed"
          
          echo "Testing 'command -v wasp':"
          if command -v wasp >/dev/null 2>&1; then
            echo "‚úÖ Wasp CLI found via command -v"
          else
            echo "‚ùå Wasp CLI not found via command -v"
          fi
          
          echo "Testing direct path access:"
          if [ -x ~/.local/bin/wasp ]; then
            echo "‚úÖ Wasp binary is executable at ~/.local/bin/wasp"
            ~/.local/bin/wasp version || echo "Version command failed"
          else
            echo "‚ùå Wasp binary not executable at ~/.local/bin/wasp"
          fi
          
          # Final verification
          echo "üéØ Final verification:"
          wasp version || {
            echo "‚ùå Wasp verification failed"
            echo "Debug info:"
            echo "HOME: $HOME"
            echo "USER: $USER"
            echo "PWD: $PWD"
            echo "Full ~/.local structure:"
            find ~/.local -name "wasp*" 2>/dev/null || echo "No wasp files found"
            exit 1
          }
          
          echo "‚úÖ Wasp CLI successfully installed and verified"
      
      - name: Install dependencies
        working-directory: planning-system/app
        run: npm ci
      
      - name: Download blog build artifacts
        uses: actions/download-artifact@v4
        with:
          name: blog-dist
          path: planning-system/blog/dist/
      
      # ENHANCED: Better Wasp build with debugging
      - name: Verify Wasp project and build
        working-directory: planning-system/app
        run: |
          echo "üîç Verifying Wasp project structure..."
          
          # Check if main.wasp exists
          if [ ! -f "main.wasp" ]; then
            echo "‚ùå main.wasp file not found"
            echo "Contents of current directory:"
            ls -la
            exit 1
          fi
          
          echo "‚úÖ Found main.wasp file"
          
          # Show Wasp project info
          echo "üìã Wasp project info:"
          wasp info || true
          
          echo "üèóÔ∏è Building Wasp application..."
          wasp build
          
          echo "‚úÖ Wasp build completed successfully"
          
          # Verify build output
          if [ -d ".wasp/build" ]; then
            echo "‚úÖ Build directory created"
            echo "Build contents:"
            ls -la .wasp/build/ || echo "Build directory empty"
          else
            echo "‚ùå Build directory not found"
            exit 1
          fi
        env:
          CI: true
      
      - name: Upload app build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: planning-system/app/.wasp/build/
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finpath_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            planning-system/app/package-lock.json
            planning-system/e2e-tests/package-lock.json
      
      # ENHANCED: Reuse cached Wasp installation with fallback
      - name: Cache Wasp CLI
        uses: actions/cache@v4
        id: wasp-cache
        with:
          path: ~/.local/bin/wasp
          key: wasp-${{ env.WASP_VERSION }}-${{ runner.os }}
      
      - name: Install Wasp CLI
        if: steps.wasp-cache.outputs.cache-hit != 'true'
        run: |
          echo "üîß Installing Wasp CLI for E2E tests..."
          
          # Ensure .local/bin directory exists
          mkdir -p ~/.local/bin
          
          # Install with retry logic
          for i in {1..3}; do
            echo "Attempt $i of 3..."
            if curl -sSL https://get.wasp-lang.dev/installer.sh | sh -s -- -v ${{ env.WASP_VERSION }}; then
              echo "‚úÖ Wasp installation completed"
              chmod +x ~/.local/bin/wasp 2>/dev/null || true
              break
            else
              echo "‚ùå Wasp installation failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "‚ùå All installation attempts failed"
                exit 1
              fi
              sleep 5
            fi
          done
      
      - name: Setup Wasp PATH and verify
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/bin:$PATH"
          
          # Verify installation
          if command -v wasp >/dev/null 2>&1; then
            echo "‚úÖ Wasp CLI available for E2E tests"
            wasp version
          else
            echo "‚ùå Wasp CLI verification failed"
            echo "Checking ~/.local/bin:"
            ls -la ~/.local/bin/ || echo "Directory missing"
            exit 1
          fi
      
      - name: Install app dependencies
        working-directory: planning-system/app
        run: npm ci
      
      - name: Install E2E test dependencies
        working-directory: planning-system/e2e-tests
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: planning-system/e2e-tests
        run: npx playwright install --with-deps
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: planning-system/app/.wasp/build/
      
      - name: Run E2E tests
        working-directory: planning-system/e2e-tests
        run: npm run test:ci
        env:
          CI: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finpath_test

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: planning-system/app/package-lock.json
      
      - name: Install dependencies
        working-directory: planning-system/app
        run: npm ci
      
      - name: Run performance benchmarks
        working-directory: planning-system/app
        run: |
          echo "Running performance benchmarks..."
          echo "Target: < 2 second calculation time"
          npm run test:performance || true
        env:
          CI: true
      
      - name: Check bundle size
        working-directory: planning-system/app
        run: |
          echo "Analyzing bundle size..."
          npm run analyze:bundle || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [preflight-checks]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security audit - App
        working-directory: planning-system/app
        run: npm audit --audit-level=high || true
      
      - name: Run security audit - Blog
        working-directory: planning-system/blog
        run: npm audit --audit-level=high || true
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build, unit-tests, financial-calculation-tests, blog-build]
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: latest
      
      - name: Download blog artifacts
        uses: actions/download-artifact@v4
        with:
          name: blog-dist
          path: planning-system/blog/dist/
      
      - name: Download app artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: planning-system/app/.wasp/build/
      
      - name: Create preview apps (if they don't exist)
        run: |
          # Try to create preview apps, ignore if they already exist
          fly apps create finpath-app-pr-${{ github.event.number }} --org personal || echo "App already exists"
          fly apps create finpath-blog-pr-${{ github.event.number }} --org personal || echo "Blog app already exists"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      
      - name: Deploy preview to Fly.io
        run: |
          echo "Deploying preview environment for PR #${{ github.event.number }}"
          
          # Deploy app
          cd planning-system/app
          fly deploy --app finpath-app-pr-${{ github.event.number }} --env PR_NUMBER=${{ github.event.number }}
          
          # Deploy blog  
          cd ../blog
          fly deploy --app finpath-blog-pr-${{ github.event.number }} --env PR_NUMBER=${{ github.event.number }}
          
          echo "‚úÖ Preview deployment complete!"
          echo "App Preview URL: https://finpath-app-pr-${{ github.event.number }}.fly.dev"
          echo "Blog Preview URL: https://finpath-blog-pr-${{ github.event.number }}.fly.dev"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
      
      - name: Comment preview URLs on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Preview deployment complete!**
              
              **App:** https://finpath-app-pr-${{ github.event.number }}.fly.dev
              **Blog:** https://finpath-blog-pr-${{ github.event.number }}.fly.dev
              
              *This preview will be automatically cleaned up when the PR is closed.*`
            })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, unit-tests, financial-calculation-tests, blog-build, e2e-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://finpath-app-prod.fly.dev
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: latest
      
      - name: Download blog artifacts
        uses: actions/download-artifact@v4
        with:
          name: blog-dist
          path: planning-system/blog/dist/
      
      - name: Download app artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: planning-system/app/.wasp/build/
      
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          
          # Deploy main app
          cd planning-system/app
          fly deploy --app finpath-app-prod --strategy immediate
          
          # Deploy blog
          cd ../blog  
          fly deploy --app finpath-blog-prod --strategy immediate
          
          echo "‚úÖ Production deployment complete!"
          echo "App: https://finpath-app-prod.fly.dev"
          echo "Blog: https://finpath-blog-prod.fly.dev"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      
      - name: Run post-deployment health checks
        run: |
          echo "üîç Running health checks..."
          
          # Wait for apps to be ready
          sleep 30
          
          # Check app health
          curl -f https://finpath-app-prod.fly.dev/health || echo "‚ùå App health check failed"
          
          # Check blog health  
          curl -f https://finpath-blog-prod.fly.dev/ || echo "‚ùå Blog health check failed"
          
          echo "‚úÖ Health checks complete"

  cleanup-preview:
    name: Cleanup Preview Apps
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: latest
      
      - name: Delete preview apps
        run: |
          echo "üßπ Cleaning up preview apps for PR #${{ github.event.number }}"
          
          # Delete preview apps
          fly apps destroy finpath-app-pr-${{ github.event.number }} --yes || echo "App already deleted"
          fly apps destroy finpath-blog-pr-${{ github.event.number }} --yes || echo "Blog app already deleted"
          
          echo "‚úÖ Preview cleanup complete"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}